#!/usr/bin/env python
# Kraken Snakemake

import os
import glob

FILES = glob.glob('*.?.fastq.gz')

#remove .fastq.gz from files to make handling easier
extless_files = []
FILES.sort()
for file in FILES:
    extless_files.append(file[:-9])

#set forward & reverse read files, shouldn't matter if it doesn't match up completely
R1 = extless_files[0]
R2 = extless_files[1]

#check reads are paired end by checking filenames are the same without .1 or .2 paired end information
if (extless_files[0])[:-2] != (extless_files[1])[:-2]:
    raise Exception("%s and %s don't appear to be paired end reads based on filename" % (R1,R2))

#set overall filename R0 after checking that they match above
R0 = (extless_files[0])[:-2]

# Obtain First Three Letters to use for file handlingj (well, all before the first _ )
FTL = R0.split('_')[0]

# Set output directory
outdir = '/gpfs/afm/cancergenetics/Abe/tool_comparison_output/kraken/'

# Set Kraken database directory
krakendb = '/gpfs/data/datasets/kraken/'

rule all:
    input: ("filesdone/%s" %FTL)

rule move_stuff:
    input: in1=("%s_raw.comp" %FTL), in2=("%s_single.kraken" %FTL), in3=("%s_paired.kraken" %FTL)
    output: final=("filesdone/%s" %FTL)
    threads: 1
    params: cluster="-R 'rusage[mem=1000]' -M 1000 -o log", queue="short-eth"
    shell: "mv {input.in1} {input.in2} {input.in3} {outdir}; touch {output.final}"

rule SE_PE_comp_merge:
    input: si=("%s_single_mpa_krak.comp" %FTL), pi=("%s_paired_mpa_krak.comp" %FTL)
    output: ("%s_raw.comp" %FTL)
    threads: 4
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: "module add R/3.5.0/gcc-mellanox; Rscript ../bin/merge_comp.R {input.si} {input.pi} {output}"

rule kraken_to_comp:
    input: s=("%s_single_mpa_krak.txt" %FTL), p=("%s_paired_mpa_krak.txt" %FTL)
    output: so=temp("%s_single_mpa_krak.comp" %FTL), sp=temp("%s_paired_mpa_krak.comp" %FTL)
    threads: 4
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: "python ~/bin/kraken-2-comp2.py {input.s}; python ~/bin/kraken-2-comp2.py {input.p}"

rule mpa_report_single:
    input: ("%s_single_confidence.kraken" %FTL)
    output: temp("%s_single_mpa_krak.txt" %FTL)
    threads:  4
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: 'kraken-mpa-report --db {krakendb} {input} > {output}'

rule mpa_report_paired:
    input: ("%s_paired_confidence.kraken" %FTL)
    output: temp("%s_paired_mpa_krak.txt" %FTL)
    threads: 4
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: 'kraken-mpa-report --db {krakendb} {input} > {output}'

rule Thresh_single:
    input: ("%s_single.kraken" %FTL)
    output: temp("%s_single_confidence.kraken" %FTL)
    threads: 4
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: 'kraken-filter --db {krakendb} --threshold 0.2 {input} > {output}'

rule Thresh_paired:
    input: ("%s_paired.kraken" %FTL)
    output: temp("%s_paired_confidence.kraken" %FTL)
    threads: 4
    params: cluster="-R 'rusage[mem=10000]' -M 10000 -o log", queue="short-ib"
    shell: 'kraken-filter --db {krakendb} --threshold 0.2 {input} > {output}'

rule single_kraken:
    input: i3=("%s_bear_unmapped.0.fastq.gz" %FTL)
    output: ("%s_single.kraken" %FTL)
    threads: 14
    params: cluster="-R 'rusage[mem=300000]' -M 300000 -o single_kraken_log", queue="large-mem"
    shell: '/gpfs/software/kraken/0.10.6/kraken --preload --db {krakendb} --threads 10 --fastq-input --gzip-compressed {input} --output {output}'

rule paired_kraken:
    input: i1=("%s_bear_unmapped.1.fastq.gz" %FTL), i2=("%s_bear_unmapped.2.fastq.gz" %FTL)
    output: ("%s_paired.kraken" %FTL)
    threads: 14
    params: cluster="-R 'rusage[mem=300000]' -M 300000 -o paired_kraken_log", queue="huge-memory"
    shell: '/gpfs/software/kraken/0.10.6/kraken --preload --db {krakendb} --threads 10 --fastq-input --paired --gzip-compressed {input.i1} {input.i2} --output {output}'
